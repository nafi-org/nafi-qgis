# -*- coding: utf-8 -*-
"""
/***************************************************************************
 NafiDockWidget
                                 A QGIS plugin
 Northern Australia Fire & Rangelands Map Services
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                             -------------------
        begin                : 2020-08-28
        git sha              : $Format:%H$
        copyright            : (C) 2020 by Tom Lynch
        email                : tom@trailmarker.io
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

import os
from urllib import parse

from qgis.PyQt import QtGui, QtWidgets, uic
from qgis.PyQt.QtCore import pyqtSignal, Qt, QModelIndex
from qgis.PyQt.QtGui import QFont, QStandardItem, QStandardItemModel 
from qgis.PyQt.QtWidgets import QApplication, QMessageBox

from qgis.core import QgsRasterLayer, QgsProject

from owslib.wms import WebMapService
from owslib.map.wms111 import ContentMetadata, WebMapService_1_1_1

from .nafi_dockwidget_base import Ui_NafiDockWidgetBase

NAFI_URL = "https://www.firenorth.org.au/public"
UNWANTED_LAYERS = ["NODATA_RASTER"]

class NafiDockWidget(QtWidgets.QDockWidget, Ui_NafiDockWidgetBase):

    closingPlugin = pyqtSignal()

    def __init__(self, parent=None):
        """Constructor."""
        super(NafiDockWidget, self).__init__(parent)
        
        self.setupUi(self)
        self.treeView.pressed.connect(self.handleTreeViewPressed)
        self.loadLayers()

    def loadLayers(self):
        """Add all NAFI WMS layers."""
        nafiUrl = NAFI_URL
        wms = WebMapService(nafiUrl)

        self.layersList = {}

        self.treeView.setHeaderHidden(True)
        self.treeViewModel = self.createModel(wms)
        self.treeView.setModel(self.treeViewModel)

    def createModel(self, wms):
        # check we've got the expected WMS protocol from NAFI
        assert isinstance(wms, WebMapService_1_1_1)

        # this structure is not properly organised via its "children" properties, need to fix it up
        owsLayers = [wms.contents[layerName] for layerName in list(wms.contents)]

        def groupByRootLayers(layers):
            parents = {}
            for layer in layers:
                if layer.parent != None:
                    if layer.parent.title not in parents:
                        parents[layer.parent.title] = layer.parent
                        layer.parent.children = [layer]
                    elif not any(c.title == layer.title for c in parents[layer.parent.title].children): 
                        parents[layer.parent.title].children.append(layer)
                else:
                    parents[layer.title] = layer

            parentLayers = list(parents.values())
            if (len(parentLayers) == len(layers)):
                return parentLayers
            else: 
                return groupByRootLayers(parentLayers)

        # check we've got at least one layer
        assert (len(owsLayers) > 0)

        # calculate our root layers
        rootLayers = groupByRootLayers(owsLayers)

        # traverse, updating model
        def addLayerToViewModel(model, owsLayer):
            assert isinstance(model, QStandardItem) or isinstance(model, QStandardItemModel)
            assert isinstance(owsLayer, ContentMetadata)

            node = QStandardItem()
            node.setFlags(Qt.ItemIsEnabled)
            node.setText(owsLayer.title)

            if owsLayer.title not in UNWANTED_LAYERS:
                model.appendRow(node)
                # track all these OWS ContentMetadata objects by title for a reverse lookup
                self.layersList[owsLayer.title] = owsLayer
                # add children to view model
                for childLayer in owsLayer.children:
                    addLayerToViewModel(node, childLayer)

        model = QStandardItemModel()

        for rootLayer in rootLayers:
            addLayerToViewModel(model, rootLayer)

        return model

    def handleTreeViewPressed(self, index):
        """Load a NAFI WMS layer given an index in the tree view."""
        assert isinstance(index, QModelIndex), "Supplied parameter is not a QModelIndex"

        modelNode = self.treeViewModel.itemFromIndex(index)
        layer = self.layersList[modelNode.text()]
       
        # If we've got a WMS layer and not a layer group, add to map
        if len(layer.children) == 0:
            wmsLayer = self.createWmsLayer(layer)
            QgsProject.instance().addMapLayer(wmsLayer)

    def createWmsLayer(self, owsLayer):
        """Create a QgsRasterLayer from WMS given an OWS ContentMetadata object."""
        assert isinstance(owsLayer, ContentMetadata)

        # Weirdly true URL-encoding of the layer ID does not work correctly
        encodedLayer = owsLayer.id.replace(" ","%20")

        # This should create "EPSG:28350" for Map Grid of Australia, "EPSG:4326" for WGS84 etc
        encodedSrsId = f"EPSG:{QgsProject.instance().crs().postgisSrid()}"
        wmsUrl = f"crs={encodedSrsId}&format=image/png&layers={encodedLayer}&styles&url={NAFI_URL}"
        wmsLayer = QgsRasterLayer(wmsUrl, owsLayer.title, 'wms')
        return wmsLayer

    def closeEvent(self, event):
        self.closingPlugin.emit()
        event.accept()
